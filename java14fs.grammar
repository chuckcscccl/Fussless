# rustlr created 616 states using default LALR(1) mode
# F# version

# no semantic actions except to return true on successful parse
valuetype bool

#lexical scanner directives

valueterminal IDENTIFIER ~ string ~ Alphanum ~ (fun x -> x)
valueterminal INTEGER_LITERAL ~ int ~ Num ~ int
valueterminal FLOATING_POINT_LITERAL ~ float ~ Float ~ float
valueterminal STRING_LITERAL ~ string ~ StrLit ~ (fun x -> x)

# extras:
# need to define tokens to recognize chars like 'c'
lexattribute custom SingleChar '.'
valueterminal CHARACTER_LITERAL ~ char ~ SingleChar ~ (fun (x:string) -> x.[1])
valueterminal HEX_LITERAL ~ int ~ Hexnum ~ int

# change from original:
lexterminal TRUE true
lexterminal FALSE false
nonterminal BOOLEAN_LITERAL

lexterminal BOOLEAN boolean
lexterminal BYTE byte
lexterminal SHORT short
lexterminal INT int
lexterminal LONG long
lexterminal CHAR char
lexterminal FLOAT float
lexterminal DOUBLE double
lexterminal DOT .
lexterminal LBRACK [
lexterminal RBRACK ]
lexterminal SEMICOLON ;
lexterminal MULT *
lexterminal COMMA ,
lexterminal LBRACE {
lexterminal RBRACE }
lexterminal EQ =
lexterminal LPAREN (
lexterminal RPAREN )
lexterminal COLON :
lexterminal PACKAGE package
lexterminal IMPORT import
lexterminal PUBLIC public
lexterminal PROTECTED protected
lexterminal PRIVATE private
lexterminal STATIC static
lexterminal ABSTRACT abstract
lexterminal FINAL final
lexterminal NATIVE native
lexterminal SYNCHRONIZED synchronized
lexterminal TRANSIENT transient
lexterminal VOLATILE volatile
lexterminal CLASS class
lexterminal EXTENDS extends
lexterminal IMPLEMENTS implements
lexterminal VOID void
lexterminal THROWS throws
lexterminal THIS this
lexterminal SUPER super
lexterminal INTERFACE interface
lexterminal IF if
lexterminal ELSE else
lexterminal SWITCH switch
lexterminal CASE case
lexterminal DEFAULT default
lexterminal DO do
lexterminal WHILE while
lexterminal FOR for
lexterminal BREAK break
lexterminal CONTINUE continue
lexterminal THROW throw
lexterminal CATCH catch
lexterminal TRY try
lexterminal RETURN return
lexterminal FINALLY finally
lexterminal NEW new
lexterminal PLUSPLUS ++
lexterminal MINUSMINUS --
lexterminal PLUS +
lexterminal MINUS -
lexterminal COMP ~
lexterminal NOT !
lexterminal DIV /
lexterminal MOD %
lexterminal LSHIFT <<
lexterminal RSHIFT >>
lexterminal URSHIFT >>>
lexterminal LT <
lexterminal GT >
lexterminal LTEQ <=
lexterminal GTEQ >=
lexterminal INSTANCEOF instanceof
lexterminal EQEQ ==
lexterminal NOTEQ !=
lexterminal AND &
lexterminal XOR ^
lexterminal OR |
lexterminal ANDAND &&
lexterminal OROR ||
lexterminal QUESTION ?
lexterminal MULTEQ *=
lexterminal DIVEQ /=
lexterminal MODEQ %=
lexterminal PLUSEQ +=
lexterminal MINUSEQ -=
lexterminal LSHIFTEQ <<=
lexterminal RSHIFTEQ >>=
lexterminal URSHIFTEQ >>>=
lexterminal ANDEQ &=
lexterminal XOREQ ^=
lexterminal OREQ |=
lexterminal NULL_LITERAL null
lexterminal CONST const
lexterminal GOTO goto
lexterminal STRICTFP strictfp
lexterminal ASSERT assert
lexterminal ELLIPSIS ...
lexterminal ENUM enum

nonterminal  goal int
nonterminal  literal int
nonterminal  type int
nonterminal  primitive_type int
nonterminal  numeric_type int
nonterminal  integral_type int
nonterminal  floating_point_type int
nonterminal  reference_type int
nonterminal  class_or_interface_type int
nonterminal  class_type int
nonterminal  interface_type int
nonterminal  array_type int
nonterminal  name int
nonterminal  simple_name int
nonterminal  qualified_name int
nonterminal  compilation_unit int
nonterminal  package_declaration_opt int
nonterminal  package_declaration int
nonterminal  import_declarations_opt int
nonterminal  import_declarations int
nonterminal  type_declarations_opt int
nonterminal  type_declarations int
nonterminal  import_declaration int
nonterminal  single_type_import_declaration int
nonterminal  type_import_on_demand_declaration int
nonterminal  type_declaration int
nonterminal  modifiers_opt int
nonterminal  modifiers int
nonterminal  modifier int
nonterminal  class_declaration int
nonterminal  super int
nonterminal  super_opt int
nonterminal  interfaces int
nonterminal  interfaces_opt int
nonterminal  interface_type_list int
nonterminal  class_body int
nonterminal  class_body_declarations int
nonterminal  class_body_declarations_opt int
nonterminal  class_body_declaration int
nonterminal  class_member_declaration int
nonterminal  field_declaration int
nonterminal  variable_declarators int
nonterminal  variable_declarator int
nonterminal  variable_declarator_id int
nonterminal  variable_initializer int
nonterminal  method_declaration int
nonterminal  method_header int
nonterminal  method_declarator int
nonterminal  formal_parameter_list_opt int
nonterminal  formal_parameter_list int
nonterminal  formal_parameter int
nonterminal  throws_opt int
nonterminal  throws int
nonterminal  class_type_list int
nonterminal  method_body int
nonterminal  static_initializer int
nonterminal  constructor_declaration int
nonterminal  constructor_declarator int
nonterminal  constructor_body int
nonterminal  explicit_constructor_invocation int
nonterminal  interface_declaration int
nonterminal  extends_interfaces_opt int
nonterminal  extends_interfaces int
nonterminal  interface_body int
nonterminal  interface_member_declarations_opt int
nonterminal  interface_member_declarations int
nonterminal  interface_member_declaration int
nonterminal  constant_declaration int
nonterminal  abstract_method_declaration int
nonterminal  array_initializer int
nonterminal  variable_initializers int
nonterminal  block int
nonterminal  block_statements_opt int
nonterminal  block_statements int
nonterminal  block_statement int
nonterminal  local_variable_declaration_statement int
nonterminal  local_variable_declaration int
nonterminal  statement int
nonterminal  statement_no_short_if int
nonterminal  statement_without_trailing_substatement int
nonterminal  empty_statement int
nonterminal  labeled_statement int
nonterminal  labeled_statement_no_short_if int
nonterminal  expression_statement int
nonterminal  statement_expression int
nonterminal  if_then_statement int
nonterminal  if_then_else_statement int
nonterminal  if_then_else_statement_no_short_if int
nonterminal  switch_statement int
nonterminal  switch_block int
nonterminal  switch_block_statement_groups int
nonterminal  switch_block_statement_group int
nonterminal  switch_labels int
nonterminal  switch_label int
nonterminal  while_statement int
nonterminal  while_statement_no_short_if int
nonterminal  do_statement int
nonterminal  for_statement int
nonterminal  for_statement_no_short_if int
nonterminal  for_init_opt int
nonterminal  for_init int
nonterminal  for_update_opt int
nonterminal  for_update int
nonterminal  statement_expression_list int
nonterminal  identifier_opt int
nonterminal  break_statement int
nonterminal  continue_statement int
nonterminal  return_statement int
nonterminal  throw_statement int
nonterminal  synchronized_statement int
nonterminal  try_statement int
nonterminal  catches_opt int
nonterminal  catches int
nonterminal  catch_clause int
nonterminal  finally int
nonterminal  assert_statement int
nonterminal  primary int
nonterminal  primary_no_new_array int
nonterminal  class_instance_creation_expression int
nonterminal  argument_list_opt int
nonterminal  argument_list int
nonterminal  array_creation_init int
nonterminal  array_creation_uninit int
nonterminal  dim_exprs int
nonterminal  dim_expr int
nonterminal  dims_opt int
nonterminal  dims int
nonterminal  field_access int
nonterminal  method_invocation int
nonterminal  array_access int
nonterminal  postfix_expression int
nonterminal  postincrement_expression int
nonterminal  postdecrement_expression int
nonterminal  unary_expression int
nonterminal  unary_expression_not_plus_minus int
nonterminal  preincrement_expression int
nonterminal  predecrement_expression int
nonterminal  cast_expression int
nonterminal  multiplicative_expression int
nonterminal  additive_expression int
nonterminal  shift_expression int
nonterminal  relational_expression int
nonterminal  equality_expression int
nonterminal  and_expression int
nonterminal  exclusive_or_expression int
nonterminal  inclusive_or_expression int
nonterminal  conditional_and_expression int
nonterminal  conditional_or_expression int
nonterminal  conditional_expression int
nonterminal  assignment_expression int
nonterminal  assignment int
nonterminal  assignment_operator int
nonterminal  expression_opt int
nonterminal  expression int
nonterminal  constant_expression int
topsym  goal

# top-level rule, only one that returns true
goal --> compilation_unit { true }

literal --> INTEGER_LITERAL | HEX_LITERAL
literal --> FLOATING_POINT_LITERAL
literal --> BOOLEAN_LITERAL
literal --> CHARACTER_LITERAL
literal --> STRING_LITERAL
literal --> NULL_LITERAL
type --> primitive_type
type --> reference_type
primitive_type --> numeric_type
primitive_type --> BOOLEAN
numeric_type --> integral_type
numeric_type --> floating_point_type
integral_type --> BYTE
integral_type --> SHORT
integral_type --> INT
integral_type --> LONG
integral_type --> CHAR
floating_point_type --> FLOAT
floating_point_type --> DOUBLE
reference_type --> class_or_interface_type
reference_type --> array_type
class_or_interface_type --> name
class_type --> class_or_interface_type
interface_type --> class_or_interface_type
array_type --> primitive_type dims
array_type --> name dims
name --> simple_name
name --> qualified_name
simple_name --> IDENTIFIER
qualified_name --> name DOT IDENTIFIER
compilation_unit --> package_declaration_opt import_declarations_opt type_declarations_opt
package_declaration_opt --> package_declaration
package_declaration_opt -->   
import_declarations_opt --> import_declarations
import_declarations_opt -->   
type_declarations_opt --> type_declarations
type_declarations_opt -->   
import_declarations --> import_declaration
import_declarations --> import_declarations import_declaration
type_declarations --> type_declaration
type_declarations --> type_declarations type_declaration
package_declaration --> PACKAGE name SEMICOLON
import_declaration --> single_type_import_declaration
import_declaration --> type_import_on_demand_declaration
single_type_import_declaration --> IMPORT name SEMICOLON
type_import_on_demand_declaration --> IMPORT name DOT MULT SEMICOLON
type_declaration --> class_declaration
type_declaration --> interface_declaration
type_declaration --> SEMICOLON
modifiers_opt -->   
modifiers_opt --> modifiers
modifiers --> modifier
modifiers --> modifiers modifier
modifier --> PUBLIC
modifier --> PROTECTED
modifier --> PRIVATE
modifier --> STATIC
modifier --> ABSTRACT
modifier --> FINAL
modifier --> NATIVE
modifier --> SYNCHRONIZED
modifier --> TRANSIENT
modifier --> VOLATILE
modifier --> STRICTFP
class_declaration --> modifiers_opt CLASS IDENTIFIER super_opt interfaces_opt class_body
super --> EXTENDS class_type
super_opt -->   
super_opt --> super
interfaces --> IMPLEMENTS interface_type_list
interfaces_opt -->   
interfaces_opt --> interfaces
interface_type_list --> interface_type
interface_type_list --> interface_type_list COMMA interface_type
class_body --> LBRACE class_body_declarations_opt RBRACE
class_body_declarations_opt -->   
class_body_declarations_opt --> class_body_declarations
class_body_declarations --> class_body_declaration
class_body_declarations --> class_body_declarations class_body_declaration
class_body_declaration --> class_member_declaration
class_body_declaration --> static_initializer
class_body_declaration --> constructor_declaration
class_body_declaration --> block
class_member_declaration --> field_declaration
class_member_declaration --> method_declaration
class_member_declaration --> modifiers_opt CLASS IDENTIFIER super_opt interfaces_opt class_body
class_member_declaration --> interface_declaration
class_member_declaration --> SEMICOLON
field_declaration --> modifiers_opt type variable_declarators SEMICOLON
variable_declarators --> variable_declarator
variable_declarators --> variable_declarators COMMA variable_declarator
variable_declarator --> variable_declarator_id
variable_declarator --> variable_declarator_id EQ variable_initializer
variable_declarator_id --> IDENTIFIER
variable_declarator_id --> variable_declarator_id LBRACK RBRACK
variable_initializer --> expression
variable_initializer --> array_initializer
method_declaration --> method_header method_body
method_header --> modifiers_opt type method_declarator throws_opt
method_header --> modifiers_opt VOID method_declarator throws_opt
method_declarator --> IDENTIFIER LPAREN formal_parameter_list_opt RPAREN
method_declarator --> method_declarator LBRACK RBRACK
formal_parameter_list_opt -->   
formal_parameter_list_opt --> formal_parameter_list
formal_parameter_list --> formal_parameter
formal_parameter_list --> formal_parameter_list COMMA formal_parameter
formal_parameter --> type variable_declarator_id
formal_parameter --> FINAL type variable_declarator_id
throws_opt -->   
throws_opt --> throws
throws --> THROWS class_type_list
class_type_list --> class_type
class_type_list --> class_type_list COMMA class_type
method_body --> block
method_body --> SEMICOLON
static_initializer --> STATIC block
constructor_declaration --> modifiers_opt constructor_declarator throws_opt constructor_body
constructor_declarator --> simple_name LPAREN formal_parameter_list_opt RPAREN
constructor_body --> LBRACE explicit_constructor_invocation block_statements RBRACE
constructor_body --> LBRACE explicit_constructor_invocation RBRACE
constructor_body --> LBRACE block_statements RBRACE
constructor_body --> LBRACE RBRACE
explicit_constructor_invocation --> THIS LPAREN argument_list_opt RPAREN SEMICOLON
explicit_constructor_invocation --> SUPER LPAREN argument_list_opt RPAREN SEMICOLON
explicit_constructor_invocation --> primary DOT THIS LPAREN argument_list_opt RPAREN SEMICOLON
explicit_constructor_invocation --> primary DOT SUPER LPAREN argument_list_opt RPAREN SEMICOLON
interface_declaration --> modifiers_opt INTERFACE IDENTIFIER extends_interfaces_opt interface_body
extends_interfaces_opt -->   
extends_interfaces_opt --> extends_interfaces
extends_interfaces --> EXTENDS interface_type
extends_interfaces --> extends_interfaces COMMA interface_type
interface_body --> LBRACE interface_member_declarations_opt RBRACE
interface_member_declarations_opt -->   
interface_member_declarations_opt --> interface_member_declarations
interface_member_declarations --> interface_member_declaration
interface_member_declarations --> interface_member_declarations interface_member_declaration
interface_member_declaration --> constant_declaration
interface_member_declaration --> abstract_method_declaration
interface_member_declaration --> class_declaration
interface_member_declaration --> interface_declaration
interface_member_declaration --> SEMICOLON
constant_declaration --> field_declaration
abstract_method_declaration --> method_header SEMICOLON
array_initializer --> LBRACE variable_initializers COMMA RBRACE
array_initializer --> LBRACE variable_initializers RBRACE
array_initializer --> LBRACE COMMA RBRACE
array_initializer --> LBRACE RBRACE
variable_initializers --> variable_initializer
variable_initializers --> variable_initializers COMMA variable_initializer
block --> LBRACE block_statements_opt RBRACE
block_statements_opt -->   
block_statements_opt --> block_statements
block_statements --> block_statement
block_statements --> block_statements block_statement
block_statement --> local_variable_declaration_statement
block_statement --> statement
block_statement --> class_declaration
block_statement --> interface_declaration
local_variable_declaration_statement --> local_variable_declaration SEMICOLON
local_variable_declaration --> type variable_declarators
local_variable_declaration --> FINAL type variable_declarators
statement --> statement_without_trailing_substatement
statement --> labeled_statement
statement --> if_then_statement
statement --> if_then_else_statement
statement --> while_statement
statement --> for_statement
statement_no_short_if --> statement_without_trailing_substatement
statement_no_short_if --> labeled_statement_no_short_if
statement_no_short_if --> if_then_else_statement_no_short_if
statement_no_short_if --> while_statement_no_short_if
statement_no_short_if --> for_statement_no_short_if
statement_without_trailing_substatement --> block
statement_without_trailing_substatement --> empty_statement
statement_without_trailing_substatement --> expression_statement
statement_without_trailing_substatement --> switch_statement
statement_without_trailing_substatement --> do_statement
statement_without_trailing_substatement --> break_statement
statement_without_trailing_substatement --> continue_statement
statement_without_trailing_substatement --> return_statement
statement_without_trailing_substatement --> synchronized_statement
statement_without_trailing_substatement --> throw_statement
statement_without_trailing_substatement --> try_statement
statement_without_trailing_substatement --> assert_statement
empty_statement --> SEMICOLON
labeled_statement --> IDENTIFIER COLON statement
labeled_statement_no_short_if --> IDENTIFIER COLON statement_no_short_if
expression_statement --> statement_expression SEMICOLON
statement_expression --> assignment
statement_expression --> preincrement_expression
statement_expression --> predecrement_expression
statement_expression --> postincrement_expression
statement_expression --> postdecrement_expression
statement_expression --> method_invocation
statement_expression --> class_instance_creation_expression
if_then_statement --> IF LPAREN expression RPAREN statement
if_then_else_statement --> IF LPAREN expression RPAREN statement_no_short_if ELSE statement
if_then_else_statement_no_short_if --> IF LPAREN expression RPAREN statement_no_short_if ELSE statement_no_short_if
switch_statement --> SWITCH LPAREN expression RPAREN switch_block
switch_block --> LBRACE switch_block_statement_groups switch_labels RBRACE
switch_block --> LBRACE switch_block_statement_groups RBRACE
switch_block --> LBRACE switch_labels RBRACE
switch_block --> LBRACE RBRACE
switch_block_statement_groups --> switch_block_statement_group
switch_block_statement_groups --> switch_block_statement_groups switch_block_statement_group
switch_block_statement_group --> switch_labels block_statements
switch_labels --> switch_label
switch_labels --> switch_labels switch_label
switch_label --> CASE constant_expression COLON
switch_label --> DEFAULT COLON
while_statement --> WHILE LPAREN expression RPAREN statement
while_statement_no_short_if --> WHILE LPAREN expression RPAREN statement_no_short_if
do_statement --> DO statement WHILE LPAREN expression RPAREN SEMICOLON
for_statement --> FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement
for_statement_no_short_if --> FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement_no_short_if
for_init_opt -->   
for_init_opt --> for_init
for_init --> statement_expression_list
for_init --> local_variable_declaration
for_update_opt -->   
for_update_opt --> for_update
for_update --> statement_expression_list
statement_expression_list --> statement_expression
statement_expression_list --> statement_expression_list COMMA statement_expression
identifier_opt -->   
identifier_opt --> IDENTIFIER
break_statement --> BREAK identifier_opt SEMICOLON
continue_statement --> CONTINUE identifier_opt SEMICOLON
return_statement --> RETURN expression_opt SEMICOLON
throw_statement --> THROW expression SEMICOLON
synchronized_statement --> SYNCHRONIZED LPAREN expression RPAREN block
try_statement --> TRY block catches
try_statement --> TRY block catches_opt finally
catches_opt -->   
catches_opt --> catches
catches --> catch_clause
catches --> catches catch_clause
catch_clause --> CATCH LPAREN formal_parameter RPAREN block
finally --> FINALLY block
assert_statement --> ASSERT expression SEMICOLON
assert_statement --> ASSERT expression COLON expression SEMICOLON
primary --> primary_no_new_array
primary --> array_creation_init
primary --> array_creation_uninit
primary_no_new_array --> literal
primary_no_new_array --> THIS
primary_no_new_array --> LPAREN expression RPAREN
primary_no_new_array --> class_instance_creation_expression
primary_no_new_array --> field_access
primary_no_new_array --> method_invocation
primary_no_new_array --> array_access
primary_no_new_array --> primitive_type DOT CLASS
primary_no_new_array --> VOID DOT CLASS
primary_no_new_array --> array_type DOT CLASS
primary_no_new_array --> name DOT CLASS
primary_no_new_array --> name DOT THIS
class_instance_creation_expression --> NEW class_or_interface_type LPAREN argument_list_opt RPAREN
class_instance_creation_expression --> NEW class_or_interface_type LPAREN argument_list_opt RPAREN class_body
class_instance_creation_expression --> primary DOT NEW IDENTIFIER LPAREN argument_list_opt RPAREN
class_instance_creation_expression --> primary DOT NEW IDENTIFIER LPAREN argument_list_opt RPAREN class_body
class_instance_creation_expression --> name DOT NEW IDENTIFIER LPAREN argument_list_opt RPAREN
class_instance_creation_expression --> name DOT NEW IDENTIFIER LPAREN argument_list_opt RPAREN class_body
argument_list_opt -->   
argument_list_opt --> argument_list
argument_list --> expression
argument_list --> argument_list COMMA expression
array_creation_uninit --> NEW primitive_type dim_exprs dims_opt
array_creation_uninit --> NEW class_or_interface_type dim_exprs dims_opt
array_creation_init --> NEW primitive_type dims array_initializer
array_creation_init --> NEW class_or_interface_type dims array_initializer
dim_exprs --> dim_expr
dim_exprs --> dim_exprs dim_expr
dim_expr --> LBRACK expression RBRACK
dims_opt -->   
dims_opt --> dims
dims --> LBRACK RBRACK
dims --> dims LBRACK RBRACK
field_access --> primary DOT IDENTIFIER
field_access --> SUPER DOT IDENTIFIER
field_access --> name DOT SUPER DOT IDENTIFIER
method_invocation --> name LPAREN argument_list_opt RPAREN
method_invocation --> primary DOT IDENTIFIER LPAREN argument_list_opt RPAREN
method_invocation --> SUPER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
method_invocation --> name DOT SUPER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
array_access --> name LBRACK expression RBRACK
array_access --> primary_no_new_array LBRACK expression RBRACK
array_access --> array_creation_init LBRACK expression RBRACK
postfix_expression --> primary
postfix_expression --> name
postfix_expression --> postincrement_expression
postfix_expression --> postdecrement_expression
postincrement_expression --> postfix_expression PLUSPLUS
postdecrement_expression --> postfix_expression MINUSMINUS
unary_expression --> preincrement_expression
unary_expression --> predecrement_expression
unary_expression --> PLUS unary_expression
unary_expression --> MINUS unary_expression
unary_expression --> unary_expression_not_plus_minus
preincrement_expression --> PLUSPLUS unary_expression
predecrement_expression --> MINUSMINUS unary_expression
unary_expression_not_plus_minus --> postfix_expression
unary_expression_not_plus_minus --> COMP unary_expression
unary_expression_not_plus_minus --> NOT unary_expression
unary_expression_not_plus_minus --> cast_expression
cast_expression --> LPAREN primitive_type dims_opt RPAREN unary_expression
cast_expression --> LPAREN expression RPAREN unary_expression_not_plus_minus
cast_expression --> LPAREN name dims RPAREN unary_expression_not_plus_minus
multiplicative_expression --> unary_expression
multiplicative_expression --> multiplicative_expression MULT unary_expression
multiplicative_expression --> multiplicative_expression DIV unary_expression
multiplicative_expression --> multiplicative_expression MOD unary_expression
additive_expression --> multiplicative_expression
additive_expression --> additive_expression PLUS multiplicative_expression
additive_expression --> additive_expression MINUS multiplicative_expression
shift_expression --> additive_expression
shift_expression --> shift_expression LSHIFT additive_expression
shift_expression --> shift_expression RSHIFT additive_expression
shift_expression --> shift_expression URSHIFT additive_expression
relational_expression --> shift_expression
relational_expression --> relational_expression LT shift_expression
relational_expression --> relational_expression GT shift_expression
relational_expression --> relational_expression LTEQ shift_expression
relational_expression --> relational_expression GTEQ shift_expression
relational_expression --> relational_expression INSTANCEOF reference_type
equality_expression --> relational_expression
equality_expression --> equality_expression EQEQ relational_expression
equality_expression --> equality_expression NOTEQ relational_expression
and_expression --> equality_expression
and_expression --> and_expression AND equality_expression
exclusive_or_expression --> and_expression
exclusive_or_expression --> exclusive_or_expression XOR and_expression
inclusive_or_expression --> exclusive_or_expression
inclusive_or_expression --> inclusive_or_expression OR exclusive_or_expression
conditional_and_expression --> inclusive_or_expression
conditional_and_expression --> conditional_and_expression ANDAND inclusive_or_expression
conditional_or_expression --> conditional_and_expression
conditional_or_expression --> conditional_or_expression OROR conditional_and_expression
conditional_expression --> conditional_or_expression
conditional_expression --> conditional_or_expression QUESTION expression COLON conditional_expression
assignment_expression --> conditional_expression
assignment_expression --> assignment
assignment --> postfix_expression assignment_operator assignment_expression
assignment_operator --> EQ
assignment_operator --> MULTEQ
assignment_operator --> DIVEQ
assignment_operator --> MODEQ
assignment_operator --> PLUSEQ
assignment_operator --> MINUSEQ
assignment_operator --> LSHIFTEQ
assignment_operator --> RSHIFTEQ
assignment_operator --> URSHIFTEQ
assignment_operator --> ANDEQ
assignment_operator --> XOREQ
assignment_operator --> OREQ
expression_opt -->   
expression_opt --> expression
expression --> assignment_expression
constant_expression --> expression

BOOLEAN_LITERAL --> TRUE | FALSE

EOF
